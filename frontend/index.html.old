<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Poros AI Assistant</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: #0B0E11;
            color: #fff;
            height: 100vh;
            display: flex;
            flex-direction: column;
        }

        /* Header */
        .header {
            background: linear-gradient(135deg, #1a1d29 0%, #0B0E11 100%);
            padding: 20px;
            border-bottom: 1px solid #2a2d39;
            text-align: center;
        }

        .header h1 {
            font-size: 24px;
            font-weight: 600;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .header p {
            font-size: 14px;
            color: #8b92a7;
            margin-top: 5px;
        }

        /* Chat Container */
        .chat-container {
            flex: 1;
            overflow-y: auto;
            padding: 20px;
            display: flex;
            flex-direction: column;
            gap: 16px;
        }

        /* Message Bubbles */
        .message {
            display: flex;
            gap: 12px;
            max-width: 800px;
            animation: fadeIn 0.3s ease-in;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .message.user {
            margin-left: auto;
            flex-direction: row-reverse;
        }

        .message-avatar {
            width: 36px;
            height: 36px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 18px;
            flex-shrink: 0;
        }

        .message.user .message-avatar {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }

        .message.assistant .message-avatar {
            background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
        }

        .message-content {
            background: #1a1d29;
            padding: 12px 16px;
            border-radius: 18px;
            line-height: 1.5;
            max-width: 600px;
        }

        .message.user .message-content {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }

        .message.assistant .message-content {
            background: #1a1d29;
            border: 1px solid #2a2d39;
        }

        /* Typing Indicator */
        .typing-indicator {
            display: flex;
            gap: 4px;
            padding: 16px;
        }

        .typing-indicator span {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background: #667eea;
            animation: typing 1.4s infinite;
        }

        .typing-indicator span:nth-child(2) { animation-delay: 0.2s; }
        .typing-indicator span:nth-child(3) { animation-delay: 0.4s; }

        @keyframes typing {
            0%, 60%, 100% { transform: translateY(0); }
            30% { transform: translateY(-10px); }
        }

        /* Input Area */
        .input-container {
            padding: 20px;
            border-top: 1px solid #2a2d39;
            background: #0B0E11;
        }

        .input-wrapper {
            max-width: 800px;
            margin: 0 auto;
            display: flex;
            gap: 12px;
            align-items: flex-end;
        }

        #messageInput {
            flex: 1;
            background: #1a1d29;
            border: 1px solid #2a2d39;
            border-radius: 24px;
            padding: 14px 20px;
            color: #fff;
            font-size: 15px;
            resize: none;
            max-height: 120px;
            font-family: inherit;
        }

        #messageInput:focus {
            outline: none;
            border-color: #667eea;
        }

        #sendButton {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border: none;
            border-radius: 50%;
            width: 48px;
            height: 48px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: transform 0.2s;
            flex-shrink: 0;
        }

        #sendButton:hover {
            transform: scale(1.05);
        }

        #sendButton:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        /* Scrollbar */
        .chat-container::-webkit-scrollbar {
            width: 8px;
        }

        .chat-container::-webkit-scrollbar-track {
            background: #0B0E11;
        }

        .chat-container::-webkit-scrollbar-thumb {
            background: #2a2d39;
            border-radius: 4px;
        }

        .chat-container::-webkit-scrollbar-thumb:hover {
            background: #3a3d49;
        }

        /* Welcome Message */
        .welcome {
            max-width: 600px;
            margin: 40px auto;
            text-align: center;
            color: #8b92a7;
        }

        .welcome h2 {
            color: #fff;
            margin-bottom: 12px;
        }

        .welcome-examples {
            margin-top: 24px;
            display: flex;
            flex-direction: column;
            gap: 12px;
        }

        .example-prompt {
            background: #1a1d29;
            border: 1px solid #2a2d39;
            padding: 12px 20px;
            border-radius: 12px;
            cursor: pointer;
            transition: all 0.2s;
        }

        .example-prompt:hover {
            border-color: #667eea;
            transform: translateY(-2px);
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>Poros AI Assistant</h1>
        <p>Your intelligent agent orchestrator</p>
    </div>

    <div class="chat-container" id="chatContainer">
        <div class="welcome" id="welcome">
            <h2>üëã How can I help you today?</h2>
            <p>I can connect you with specialized AI agents for various tasks.</p>
            <div class="welcome-examples">
                <div class="example-prompt" onclick="sendExample('Find me a hotel in San Francisco for next week')">
                    üè® Find me a hotel in San Francisco
                </div>
                <div class="example-prompt" onclick="sendExample('What agents are available?')">
                    ü§ñ What agents are available?
                </div>
                <div class="example-prompt" onclick="sendExample('Help me plan a trip')">
                    ‚úàÔ∏è Help me plan a trip
                </div>
            </div>
        </div>
    </div>

    <div class="input-container">
        <div class="input-wrapper">
            <textarea
                id="messageInput"
                placeholder="Type your message..."
                rows="1"
                onkeydown="handleKeyPress(event)"
            ></textarea>
            <button id="sendButton" onclick="sendMessage()">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M22 2L11 13" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    <path d="M22 2L15 22L11 13L2 9L22 2Z" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
            </button>
        </div>
    </div>

    <script>
        // Configuration - UPDATE THIS when you deploy the client agent API
        const CLIENT_API_URL = 'http://localhost:8000';  // Will update to Railway URL

        const sessionId = 'session_' + Date.now();
        let isTyping = false;

        function addMessage(content, isUser) {
            const welcome = document.getElementById('welcome');
            if (welcome) welcome.remove();

            const chatContainer = document.getElementById('chatContainer');
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${isUser ? 'user' : 'assistant'}`;

            messageDiv.innerHTML = `
                <div class="message-avatar">${isUser ? 'üë§' : 'ü§ñ'}</div>
                <div class="message-content">${content}</div>
            `;

            chatContainer.appendChild(messageDiv);
            chatContainer.scrollTop = chatContainer.scrollHeight;
        }

        function showTyping() {
            const chatContainer = document.getElementById('chatContainer');
            const typingDiv = document.createElement('div');
            typingDiv.className = 'message assistant';
            typingDiv.id = 'typing';
            typingDiv.innerHTML = `
                <div class="message-avatar">ü§ñ</div>
                <div class="message-content">
                    <div class="typing-indicator">
                        <span></span>
                        <span></span>
                        <span></span>
                    </div>
                </div>
            `;
            chatContainer.appendChild(typingDiv);
            chatContainer.scrollTop = chatContainer.scrollHeight;
        }

        function hideTyping() {
            const typing = document.getElementById('typing');
            if (typing) typing.remove();
        }

        async function sendMessage() {
            const input = document.getElementById('messageInput');
            const message = input.value.trim();

            if (!message || isTyping) return;

            // Add user message
            addMessage(message, true);
            input.value = '';
            input.style.height = 'auto';

            // Disable input
            isTyping = true;
            document.getElementById('sendButton').disabled = true;

            // Show typing
            showTyping();

            try {
                // Call client agent API
                const response = await fetch(`${CLIENT_API_URL}/chat`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        message: message,
                        session_id: sessionId
                    })
                });

                const data = await response.json();

                // Hide typing and show response
                hideTyping();
                addMessage(data.response, false);

            } catch (error) {
                hideTyping();
                addMessage('Sorry, I encountered an error. Please try again.', false);
                console.error('Error:', error);
            }

            // Re-enable input
            isTyping = false;
            document.getElementById('sendButton').disabled = false;
            input.focus();
        }

        function sendExample(text) {
            document.getElementById('messageInput').value = text;
            sendMessage();
        }

        function handleKeyPress(event) {
            if (event.key === 'Enter' && !event.shiftKey) {
                event.preventDefault();
                sendMessage();
            }
        }

        // Auto-resize textarea
        document.getElementById('messageInput').addEventListener('input', function() {
            this.style.height = 'auto';
            this.style.height = this.scrollHeight + 'px';
        });

        // Focus input on load
        window.onload = () => {
            document.getElementById('messageInput').focus();
        };
    </script>
</body>
</html>
